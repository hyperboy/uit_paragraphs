<?php
/**
 * @file
 * Code for the UIT Paragraphs feature.
 */

include_once 'uit_paragraphs.features.inc';

function uit_paragraphs_theme($existing, $type, $theme, $path) {
  return array();
}

function uit_paragraphs_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'uit_paragraphs');
  $theme_path = $module_path . '/theme';
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $theme_path);

  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Implements hook_preprocess_entity().
 *
 * Add class with paragraphs entity id to paragraphs item.
 */
function uit_paragraphs_preprocess_entity(&$variables) {
  // Only run with paragraphs_item entity.
  if (!empty($variables['entity_type']) == 'paragraphs_item') {
    if (!empty($variables['paragraphs_item'])) {
      // Get paragraph entity.
      $entity = $variables['paragraphs_item'];
      // Define class name.
      $id = $entity->item_id;
      // Add class to classes_array.
      $variables['item_id'] = $id;
    }
  }
}

